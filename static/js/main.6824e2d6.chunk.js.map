{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","todos","setTodos","_useState3","_useState4","todoEditing","setTodoEditing","useEffect","json","localStorage","getItem","loadedTodos","JSON","parse","length","stringify","setItem","react_default","a","createElement","id","onSubmit","e","preventDefault","todo","document","getElementById","value","newTodo","Date","getTime","text","trim","completed","toConsumableArray","concat","alert","type","map","key","className","checked","onChange","updatedTodos","toggleComplete","defaultValue","onClick","newtodo","submitEdits","filter","deleteTodo","href","target","rel","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.6824e2d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nconst App = () => {\n    const [todos, setTodos] = useState([]);\n    const [todoEditing, setTodoEditing] = useState(null);\n\n    // Add the handlesubmit code here\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        let todo = document.getElementById('todoAdd').value\n        const newTodo = {\n            id: new Date().getTime(),\n            text: todo.trim(),\n            completed: false,\n        };\n        if (newTodo.text.length > 0) {\n            setTodos([...todos].concat(newTodo));\n        } else {\n            alert(\"Enter Valid Task\");\n        }\n        document.getElementById('todoAdd').value = \"\"\n    }\n\n    // Add the deleteToDo code here\n    function deleteTodo(id) {\n        let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n        setTodos(updatedTodos);\n    }\n\n    // Add the toggleComplete code here\n    function toggleComplete(id) {\n        let updatedTodos = [...todos].map((todo) => {\n            if (todo.id === id) {\n                todo.completed = !todo.completed;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    }\n\n    // Add the submitEdits code here\n    function submitEdits(newtodo) {\n        const updatedTodos = [...todos].map((todo) => {\n            if (todo.id === newtodo.id) {\n                todo.text = document.getElementById(newtodo.id).value;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n        setTodoEditing(null);\n    }\n\n    useEffect(() => {\n        const json = localStorage.getItem(\"todos\");\n        const loadedTodos = JSON.parse(json);\n        if (loadedTodos) {\n            setTodos(loadedTodos);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (todos.length > 0) {\n            const json = JSON.stringify(todos);\n            localStorage.setItem(\"todos\", json);\n        }\n    }, [todos]);\n\n    return (\n        <div id=\"todo-list\">\n            <h1>Todo List</h1>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    id='todoAdd'\n                />\n                <button type=\"submit\">Add Todo</button>\n            </form>\n            {todos.map((todo) => (\n\n                <div key={todo.id} className=\"todo\">\n                    <div className=\"todo-text\">\n                        {/* Add checkbox for toggle complete */}\n                        <input\n                            type=\"checkbox\"\n                            id=\"completed\"\n                            checked={todo.completed}\n                            onChange={() => toggleComplete(todo.id)}\n                        />\n                        {/* if it is edit mode, display input box, else display text */}\n                        {todo.id === todoEditing ?\n                            (<input\n                                type=\"text\"\n                                id={todo.id}\n                                defaultValue={todo.text}\n                            />) :\n                            (<div>{todo.text}</div>)\n                        }\n                    </div>\n                    <div className=\"todo-actions\">\n                        {/* if it is edit mode, allow submit edit, else allow edit */}\n                        {todo.id === todoEditing ?\n                            (\n                                <button onClick={() => submitEdits(todo)}>Submit Edits</button>\n                            ) :\n                            (\n                                <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n                            )}\n\n                        <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n                    </div>\n                </div>\n            ))}\n            <div className=\"credits\">\n                <p>Name: Muhammad Asif</p>\n                <p>Connect with me:</p>\n                <ul>\n                    <li><a href=\"https://www.linkedin.com/in/asif543/\" target=\"_blank\" rel=\"noopener noreferrer\">Linkedin</a></li>\n                    <li><a href=\"mailto:Asifmahsud543@gmail.com\">Email</a></li>\n                    <li><a href=\"https://github.com/AsifMahsud\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></li>\n                </ul>\n            </div>\n        </div>\n    );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}